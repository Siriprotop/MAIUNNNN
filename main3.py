from imports import *
EXACT_ADDRESS, DETAILS, PHOTO, YR_MODERATION, BONUS_CODE = range(5)


bot = None
user_data = {}
moderator_ids = [6964683351]
# classes
dbm = ChannelDB("channels_list.db")
info_dbs = InfoDb()
dbs = DataB()
ukrainian_months = {
    1: "—Å—ñ—á–Ω—è", 2: "–ª—é—Ç–æ–≥–æ", 3: "–±–µ—Ä–µ–∑–Ω—è", 4: "–∫–≤—ñ—Ç–Ω—è",
    5: "—Ç—Ä–∞–≤–Ω—è", 6: "—á–µ—Ä–≤–Ω—è", 7: "–ª–∏–ø–Ω—è", 8: "—Å–µ—Ä–ø–Ω—è",
    9: "–≤–µ—Ä–µ—Å–Ω—è", 10: "–∂–æ–≤—Ç–Ω—è", 11: "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", 12: "–≥—Ä—É–¥–Ω—è"
}


CHOOSE_city, BROADCAST_MSG, BROADCAST_ALL = range(5, 8)
# def create_promocodes_table():
#     conn = sqlite3.connect('subscribe.db')
#     cursor = conn.cursor()
#     cursor.execute('''
#         CREATE TABLE IF NOT EXISTS promocodes (
#             user_id INTEGER,
#             promocode TEXT,
#             expiry_date DATETIME,
#             active INTEGER,
#             count INTEGER DEFAULT 0
#         )
#     ''')
#     conn.commit()
#     conn.close()



def format_message(address, details, photo, date_time):
    message_parts = [address, details if details.strip() != '' else None, photo if photo.strip() != '' else None, date_time]
    return "\n".join(filter(None, message_parts))

def format_without_photo(address, details, date_time):
    message_parts = [address, details if details.strip() != '' else None, date_time]
    return "\n".join(filter(None, message_parts))

def generate_bonus_code(user_id, conn):
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT promocode, expiry_date FROM promocodes WHERE user_id = ? AND active = 1", (user_id,))
    active_promocode = cursor.fetchone()
    if active_promocode:
        promocode, expiry_date = active_promocode
        if datetime.now() <= datetime.strptime(expiry_date, '%Y-%m-%d %H:%M:%S'):
            return f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {promocode}."
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
    cursor.execute("SELECT subscribe_date FROM subscribers WHERE user_id = ?", (user_id,))
    subscribe_date = cursor.fetchone()
    bonus_code = "B" + str(random.randint(1000, 9999))
    expiry_date = datetime.now() + timedelta(minutes=1)
    cursor.execute("INSERT INTO promocodes (user_id, promocode, expiry_date, active, count) VALUES (?, ?, ?, 1, 0)",
                    (user_id, bonus_code, expiry_date.strftime('%Y-%m-%d %H:%M:%S')))
    conn.commit()

    message = f"–ü–û–î–ï–õ–ò–°–¨ –≠–¢–ò–ú –°–û–û–ë–©–ï–ù–ò–ï–ú –° –î–†–£–ì–û–ú –∏ –ø–æ–ª—É—á–∏ PREMIUM –î–û–°–¢–£–ü –∫ –∫–∞–Ω–∞–ª—É –Ω–∞ 1 –º–µ—Å—è—Ü:\n" \
                f"üìç –î–æ—Å—Ç—É–ø –∫ –∫–∞—Ä—Ç–µ –∞–¥—Ä–µ—Å–æ–≤\n" \
                f"ü§° –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏ –Ω–æ–≤–æ—Å—Ç–µ–π\n" \
                f"üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω–µ\n" \
                f"üíµ –£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ü–∏–∏ ‚Äú–õ—É—á—à–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª‚Äù\n\n" \
                f"–¢–≤–æ–π –±–æ–Ω—É—Å-–∫–æ–¥: {bonus_code}\n" \
                f"–û–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 48 —á–∞—Å–æ–≤.\n\n" \
                f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –¥—Ä—É–≥–∞:\n" \
                f"1) –ó–∞–π–¥–∏ –≤ –±–æ—Ç https://t.me/sasadas_bot/\n" \
                f"2) –í—ã–±–µ—Ä–∏ '–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å-–∫–æ–¥'\n" \
                f"3) –û—Ç–ø—Ä–∞–≤—å –±–æ–Ω—É—Å-–∫–æ–¥ –±–æ—Ç—É.\n"

    return message
def ask_for_bonus_code(update: Update, context: CallbackContext) -> None:
    update.message.reply_text("–ù–∞–ø–∏—à–∏ –±–æ–Ω—É—Å-–∫–æ–¥ –≤ —á–∞—Ç")
    return BONUS_CODE  # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler

def check_bonus_code(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    entered_code = update.message.text.strip()
    conn = sqlite3.connect('subscribe.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–æ–º–æ–∫–æ–¥
    cursor.execute("SELECT promocode, expiry_date FROM promocodes WHERE activated_by_user_id LIKE ? AND active = 1", (f'%{user_id}%',))
    active_promocodes = cursor.fetchall()

    for promocode, expiry_date in active_promocodes:
        if datetime.now() <= datetime.strptime(expiry_date, '%Y-%m-%d %H:%M:%S'):
            update.message.reply_text(f"‚ùå –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {promocode}. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–æ –µ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è.")
            conn.close()
            return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –±–∞–∑–µ –∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    cursor.execute("SELECT promocode, expiry_date, activated_by_user_id, count FROM promocodes WHERE promocode = ? AND active = 1", (entered_code,))
    code_data = cursor.fetchone()

    if code_data:
        promocode, expiry_date, activated_user_ids_str, count = code_data
        expiry_date = datetime.strptime(expiry_date, '%Y-%m-%d %H:%M:%S')

        if not isinstance(activated_user_ids_str, str):
            activated_user_ids_str = str(activated_user_ids_str)
        
        activated_user_ids = activated_user_ids_str.split(',') if activated_user_ids_str else []

        if datetime.now() <= expiry_date:
            if str(user_id) not in activated_user_ids:
                activated_user_ids.append(str(user_id))
                new_user_ids_str = ','.join(activated_user_ids)
                new_count = count + 1
                cursor.execute("UPDATE promocodes SET activated_by_user_id = ?, count = ? WHERE promocode = ?", (new_user_ids_str, new_count, entered_code))
                conn.commit()
                update.message.reply_text("‚úÖ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            else:
                update.message.reply_text("‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
            return ConversationHandler.END
        else:
            update.message.reply_text("‚ùå –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")
            return ConversationHandler.END
    else:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        return ConversationHandler.END
    conn.close()

def share_bonus_code(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    conn = sqlite3.connect('subscribe.db') 
    response = generate_bonus_code(user_id, conn)
    update.message.reply_text(response)
    conn.close()



def broadcast(update: Update, context: CallbackContext, user_ids) -> None:
    message = update.message
    if message.text:
        for user_id in user_ids:
            print(user_id)
            try:
                # Attempt to send the message
                context.bot.send_message(chat_id=user_id, text=message.text)
            except telegram.error.BadRequest as e:
                # Log the error and continue with the next user ID
                print(f"Failed to send message to {user_id}: {e}")
    elif message.photo:
        # Send the highest quality photo
        photo = message.photo[-1].file_id
        for user_id in user_ids:
            try:
                context.bot.send_photo(chat_id=user_id, photo=photo)
            except telegram.error.BadRequest as e:
                # Log the error and continue with the next user ID
                print(f"Failed to send message to {user_id}: {e}")
    elif message.document:
        # Send document
        document = message.document.file_id
        for user_id in user_ids:
            try:
                context.bot.send_document(chat_id=user_id, document=document)
            except telegram.error.BadRequest as e:
                # Log the error and continue with the next user ID
                print(f"Failed to send message to {user_id}: {e}")
def upload_image_to_imgur(image_path, client_id):
    url = "https://api.imgur.com/3/image"
    headers = {"Authorization": f"Client-ID {client_id}"}
    with open(image_path, "rb") as image:
        img = image.read()
    response = requests.post(url, headers=headers, files={"image": img})
    data = response.json()
    if response.status_code == 200:
        return data["data"]["link"]
    else:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {data}")
        return None

def broadcast_moderator(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    if user_id in moderator_ids:
        keyboard = [
            [InlineKeyboardButton("–í—Å–µ–º –≥–æ—Ä–æ–¥–∞–º", callback_data='broadcast_all')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏:", reply_markup=reply_markup)
        return CHOOSE_city
    else:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

def broadcast_to_all_cities(update: Update, context: CallbackContext) -> int:
    message = update.message
    caption = message.caption if message.caption else None
    content = message.text if message.text else None
    photo = message.photo[-1].file_id if message.photo else None
    document = message.document.file_id if message.document else None

    try:
        user_ids = dbs.get_all_users()
        for user_tuple in user_ids:
                user_id = user_tuple[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
                for city_channel in channelsss:
                    res1 = is_user_in_channel(bot, city_channel, user_id)
                    if res1 == True:
                        break
                if res1 == True:
                    continue
                if photo and caption:
                    context.bot.send_photo(chat_id=user_id, photo=photo, caption=caption)
                elif content:
                    context.bot.send_message(chat_id=user_id, text=content)
                elif photo:
                    context.bot.send_photo(chat_id=user_id, photo=photo)
                elif document:
                    context.bot.send_document(chat_id=user_id, document=document)
        for city, channel_id in city_channels.items():
            try:
                if photo and caption:
                    context.bot.send_photo(chat_id=channel_id, photo=photo, caption=caption)
                elif content:
                    context.bot.send_message(chat_id=channel_id, text=content)
                elif photo:
                    context.bot.send_photo(chat_id=channel_id, photo=photo)
                elif document:
                    context.bot.send_document(chat_id=channel_id, document=document)
            except telegram.error.BadRequest as e:
                print(f"Failed to send message to channel {channel_id}: {e}")

        update.message.reply_text("Content sent to all city channels and users.")
    except Exception as e:
        update.message.reply_text(f"Failed to send messages: {e}")
        print(f"Exception: {e}")

    return ConversationHandler.END



def broadcast_to_city(update: Update, context: CallbackContext) -> int:
    city_file = context.user_data.get('city_file')
    city_name = context.user_data.get('city_name')
    print(city_file)
    message = update.message

    if not city_file:
        update.message.reply_text("No city file found.")
        return ConversationHandler.END


    caption = message.caption if message.caption else None
    content = message.text if message.text else None
    photo = message.photo[-1].file_id if message.photo else None
    document = message.document.file_id if message.document else None

    try:
        user_ids = dbs.get_users_by_city(city_name)
        print(user_ids)
        print(f"sadasadsasada {city_name}")
        for user_id in user_ids:
                for city_channel in channelsss:
                    res1 = is_user_in_channel(bot, city_channel, user_id)
                    if res1 == True:
                        break
                if res1 == True:
                    continue
                try:

                    if photo and caption:
                        context.bot.send_photo(chat_id=user_id, photo=photo, caption=caption)
                    elif content:
                        context.bot.send_message(chat_id=user_id, text=content)
                    elif photo:
                        context.bot.send_photo(chat_id=user_id, photo=photo)
                    elif document:
                        context.bot.send_document(chat_id=user_id, document=document)
                except Exception as e:
                    print(e)
        for filek, channel_id in file_to_channel_id.items():
            if filek == city_file:
                if photo and caption:
                    context.bot.send_photo(chat_id=channel_id, photo=photo, caption=caption)
                elif content:
                    context.bot.send_message(chat_id=channel_id, text=content)
                elif photo:
                    context.bot.send_photo(chat_id=channel_id, photo=photo)
                elif document:
                    context.bot.send_document(chat_id=channel_id, document=document)

        update.message.reply_text(f"Content sent to users in {city_file}.")
    except Exception as e:
        update.message.reply_text(f"Failed to send messages: {e}")
    
    return ConversationHandler.END





def choose_city(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    user_id = update.effective_user.id  # Get user_id from the effective user
    chosen_city = query.data
    if user_id not in user_data:
        user_data[user_id] = {}  # Initialize an empty dict for the user

    if chosen_city == 'broadcast_all':
        query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        return BROADCAST_ALL
    elif chosen_city in city_files:
        # Now we're sure user_id is initialized, so we can safely assign city
        user_data[user_id]['city'] = chosen_city
        context.user_data['city_name'] = chosen_city
        context.user_data['city_file'] = city_files[chosen_city]
        print(chosen_city)
        dbs.add_user(user_id, chosen_city)
        print(f"ALL users: {dbs.get_all_users()}")
        query.edit_message_text(text=f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ {chosen_city}:")
        return BROADCAST_MSG

    query.edit_message_text(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞.")
    return ConversationHandler.END

def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    user_data[user_id] = {}
    update.message.reply_text(
        "–î—è–∫—É—é —â–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —Ä–æ–±–æ—Ç–∞ WTU. –ú–∏ –±—É–¥–µ–º–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –í–∞—Å –ø—Ä–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∞–¥—Ä–µ—Å–∏ WTU.\n\n"
    )

    city(update, context)

def city(update: Update, context: CallbackContext) -> None:
    user_id = update.message.chat_id
    cities = [
        "–ö–∏—ó–≤", "–•–∞—Ä–∫—ñ–≤", "–û–¥–µ—Å–∞", "–õ—å–≤—ñ–≤", "–î–Ω—ñ–ø—Ä–æ", "–ó–∞–ø–æ—Ä—ñ–∂–∂—è", "–ú–∏–∫–æ–ª–∞—ó–≤",
        "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫", "–ö—Ä–∏–≤–∏–π –†—ñ–≥", "–†—ñ–≤–Ω–µ", "–ß–µ—Ä–Ω—ñ–≤—Ü—ñ", "–ß–µ—Ä–∫–∞—Å–∏", "–°—É–º–∏",
        "–ñ–∏—Ç–æ–º–∏—Ä", "–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü—å–∫–∏–π", "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å", "–õ—É—Ü—å–∫", "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π", "–ü–æ–ª—Ç–∞–≤–∞",
        "–£–∂–≥–æ—Ä–æ–¥", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤", "–í—ñ–Ω–Ω–∏—Ü—è", "–•–µ—Ä—Å–æ–Ω"
    ]
    keyboard = [[InlineKeyboardButton(cities[i], callback_data=cities[i]),
                 InlineKeyboardButton(cities[i + 1], callback_data=cities[i + 1])]
                 for i in range(0, len(cities) - 1, 2)]
    if len(cities) % 2 != 0:
        keyboard.append([InlineKeyboardButton(cities[-1], callback_data=cities[-1])])

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–í–∏–±–µ—Ä–∏ –º—ñ—Å—Ç–æ:', reply_markup=reply_markup)


def yr_moderation(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    query.answer()
    user_id_to_edit = int(query.data.split('_')[1])  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ callback_data

    context.user_data['EDIT_USER_ID'] = user_id_to_edit  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ user_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print(user_id_to_edit)
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ç–æ—á–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    update.effective_message.reply_text(
        "<b>1) –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n"
        "–ß–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–¥—Ä–µ—Å, —Ç–µ–º –ª—É—á—à–µ.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ, 33.",
        parse_mode='HTML'
    )
    return EXACT_ADDRESS  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–∏–∞–ª–æ–≥–∞

def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    user_id = query.message.chat_id
    chosen_city = query.data
    
    if query.data == 'skip_photo':
        users_datas3 = {}
        if 'EDIT_USER_ID' in context.user_data:
            user_id_to_edit = context.user_data['EDIT_USER_ID']
            if user_id_to_edit in user_data:
                post_id = user_data[user_id_to_edit].get('POST_ID')
                city_to_check = user_data[user_id_to_edit]['city']
                address = user_data[user_id_to_edit]['EXACT_ADDRESS']
                details = user_data[user_id_to_edit].get('DETAILS', '')
                user_data[user_id_to_edit].pop('PHOTO', None)
                date_time = user_data[user_id_to_edit].get('DATE_TIME', '')
                city_channel = city_channels.get(city_to_check)
                if city_channel:
                    try:
                        context.bot.send_message(
                            chat_id=city_channel,
                            text=format_without_photo(address, details, date_time)
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {city_channel}: {e}")
                else:
                    query.answer(text="–ö–∞–Ω–∞–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            city_file = city_files.get(city_to_check)
            if city_file:
                user_ids = dbs.get_users_by_city(city_to_check)
                for user_id in user_ids:
                    res1 = is_user_in_channel(bot, city_channel, user_id)
                    if res1 == True:
                        continue
                    try:
                        context.bot.send_message(chat_id=user_id, text=format_without_photo(address, details, date_time))
                
                    except telegram.error.BadRequest as e:
                        print(f"Failed to send message to user {user_id}: {e}")
                return ConversationHandler.END
            else:
                print(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                context.user_data.clear()  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ clear() –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                return ConversationHandler.END
        print('GGG')
        query.message.reply_text("<b>–î—è–∫—É—î–º–æ, —â–æ –∑–∞–ª–∏—à–∏–ª–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É. –í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–¥–µ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ, —ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞.</b>", parse_mode='HTML')
        now = datetime.now()
        month_name = ukrainian_months[now.month]  # Get Ukrainian month name
        formatted_date = now.strftime(f"%d {month_name}, %H:%M")  # Format the date
        user_data[user_id]['DATE_TIME'] = formatted_date
        city = user_data[user_id].get('city', '').strip()
        context.user_data['city_name'] = city
        if city in city_files:
            context.user_data['city_file'] = city_files[city]
        if user_data[user_id]['DETAILS']:
            process_message_for_publication(update, context)
            return ConversationHandler.END
        else:
            process_message_for_publication(update, context)
            return ConversationHandler.END

    if query.data == 'skip_details':
        user_data[user_id]['DETAILS'] = ""
        keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data='skip_photo')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        context.bot.send_message(chat_id=user_id, text="<b>3) –§–æ—Ç–æ –º—ñ—Å—Ü—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>", parse_mode='HTML', reply_markup=reply_markup)
        return PHOTO
    if user_id not in user_data:
        user_data[user_id] = {}
    if query.data.startswith('no_'):
        user_id_to_delete = int(query.data.split('_')[1])
        post_id_to_delete = user_data[user_id_to_delete].get('POST_ID')
        query.edit_message_text(text="This post has already been published")

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if post_id_to_delete is not None:
            dbs.delete_post(post_id_to_delete)

        try:
            query.edit_message_text(text="–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            return ConversationHandler.END
        except Exception as e:
            print(e)
            return ConversationHandler.END


    elif query.data.startswith('yr_'):
        query.edit_message_text(text="This post has already published")
        return yr_moderation(update, context)
    elif query.data.startswith('yp'):
        user_id_to_edit = int(query.data[3:])
        if user_id_to_edit in user_data:
            post_id = user_data[user_id_to_edit].get('POST_ID')
            query.edit_message_text('This post has already been published')
            city_to_check = user_data[user_id_to_edit]['city']
            address = user_data[user_id_to_edit]['EXACT_ADDRESS']
            details = user_data[user_id_to_edit].get('DETAILS', '')
            photo = user_data[user_id_to_edit].get('PHOTO', '')
            date_time = user_data[user_id_to_edit].get('DATE_TIME', '')
            info_dbs.add_address(address, details)
            city_channel = city_channels.get(city_to_check)
            if city_channel:
                try:
                    context.bot.send_message(
                        chat_id=city_channel,
                        text=format_message(address, details, photo, date_time)
                    )
                except Exception as e:  
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {city_channel}: {e}")
            else:
                query.answer(text="–ö–∞–Ω–∞–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            city_file = city_files.get(city_to_check)
            if city_file:
                user_ids = dbs.get_users_by_city(city_to_check)
                for user_id in user_ids:
                    res1 = is_user_in_channel(bot, city_channel, user_id)
                    if res1 == True:
                        continue
                    try:
                        context.bot.send_message(chat_id=user_id, text=format_message(address, details, photo, date_time))
                    except telegram.error.BadRequest as e:
                        print(f"Failed to send message to user {user_id}: {e}")

            else:
                print(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        user_data[user_id]['city'] = query.data
        dbs.add_user(user_id, query.data)
        print(dbs.get_all_users())
        print("City set to:", user_data[user_id]['city'])  # Debug print
        query.edit_message_text(text=f"–í–∏–±—Ä–∞–Ω–µ –º—ñ—Å—Ç–æ: {query.data}")

        reply_keyboard = [
            ["–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É"],
            ["–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É –∞–¥—Ä–µ—Å"],
            ["–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å-–∫–æ–¥"],
            ["–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"]
        ]
        if user_id in moderator_ids:
            reply_keyboard.append(["–†–∞—Å—Å—ã–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"])
        update.effective_message.reply_text(
            '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False, resize_keyboard=True)
        )

def new_address(update: Update, context: CallbackContext) -> int:
    user_id = update.message.chat_id
    if user_id in user_data and 'PHOTO' in user_data[user_id]:
        del user_data[user_id]['PHOTO']
    update.message.reply_text("<b>1) –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n–ß–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–¥—Ä–µ—Å, —Ç–µ–º –ª—É—á—à–µ.\n–ù–∞–ø—Ä: –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ, 33.", parse_mode='HTML')
    return EXACT_ADDRESS

def exact_address(update: Update, context: CallbackContext) -> int:
    print("EXACT ADDRESS")
    text = update.message.text
    user_id = update.message.chat_id
    if user_id not in user_data:
        user_data[user_id] = {}
        print('user_id in exact address not in user_data')
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data='skip_details')]
    ]
    print('reply_markup')
    reply_markup = InlineKeyboardMarkup(keyboard)
    if 'EDIT_USER_ID' in context.user_data:
        print('edit user id in exact adddress')
        user_id_to_edit = context.user_data['EDIT_USER_ID']
        print(user_id_to_edit)
        print(f'USER ID TO EDIT IN EXACT {user_id_to_edit}')
        user_data[user_id_to_edit]['EXACT_ADDRESS'] = text
        update.message.reply_text("<b>2) –î–µ—Ç–∞–ª—ñ –º—ñ—Å—Ü—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n–£–∫–∞–∂–∏—Ç–µ –≥–¥–µ –≤—ã —ç—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∏\n–ù–∞–ø—Ä: –†—è–¥–æ–º –∫—Ä–∞—Å–Ω–∞—è –≤—ã–≤–µ—Å–∫–∞, –∏ –º–∞–≥–∞–∑–∏–Ω –ú–æ—Ä–µ –ü–∏–≤–∞", reply_markup=reply_markup, parse_mode='HTML')
        return DETAILS
    else:
        user_data[user_id]['EXACT_ADDRESS'] = text
        update.message.reply_text("<b>2) –î–µ—Ç–∞–ª—ñ –º—ñ—Å—Ü—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n–£–∫–∞–∂–∏—Ç–µ –≥–¥–µ –≤—ã —ç—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∏\n–ù–∞–ø—Ä: –†—è–¥–æ–º –∫—Ä–∞—Å–Ω–∞—è –≤—ã–≤–µ—Å–∫–∞, –∏ –º–∞–≥–∞–∑–∏–Ω –ú–æ—Ä–µ –ü–∏–≤–∞", reply_markup=reply_markup, parse_mode='HTML')
        return DETAILS



def details(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    user_id = update.message.chat_id
    if user_id not in user_data:
        user_data[user_id] = {}
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data='skip_photo')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if 'EDIT_USER_ID' in context.user_data:
        print('DETAILS UPDATE')
        user_id_to_edit = context.user_data['EDIT_USER_ID']
        user_data[user_id_to_edit]['DETAILS'] = text
        update.message.reply_text('<b>3) –§–æ—Ç–æ –º—ñ—Å—Ü—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>', parse_mode='HTML', reply_markup=reply_markup)
        return PHOTO
    user_data[user_id]['DETAILS'] = text
    update.message.reply_text("<b>3) –§–æ—Ç–æ –º—ñ—Å—Ü—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>", parse_mode='HTML', reply_markup=reply_markup)
    return PHOTO



def updaterPhoto(update: Update, context: CallbackContext) -> int:
    user_id = update.message.chat_id
    user_id_to_edit = context.user_data.get('EDIT_USER_ID', user_id)  # getting the user id to edit

    if update.message.photo:
        photo_file = update.message.photo[-1].get_file()
        photo_path = f'imgs/user_{user_id}_photo.jpg'
        photo_file.download(photo_path)
        imgur_url = upload_image_to_imgur(photo_path, "a4d7dd18d36705f")

        if imgur_url:
            user_data[user_id_to_edit]['PHOTO'] = imgur_url
        else:
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.")

    now = datetime.now()
    month_name = ukrainian_months[now.month]
    formatted_date = now.strftime(f"%d {month_name}, %H:%M")
    user_data[user_id_to_edit]['DATE_TIME'] = formatted_date
    if True:
        if user_id_to_edit in user_data:
            post_id = user_data[user_id_to_edit].get('POST_ID')
            city_to_check = user_data[user_id_to_edit]['city']
            address = user_data[user_id_to_edit]['EXACT_ADDRESS']
            details = user_data[user_id_to_edit].get('DETAILS', '')
            photo = user_data[user_id_to_edit].get('PHOTO', '')
            date_time = user_data[user_id_to_edit].get('DATE_TIME', '')


            city_channel = city_channels.get(city_to_check)
            if city_channel:
                try:
                    context.bot.send_message(
                        chat_id=city_channel,
                        text=format_message(address, details, photo, date_time)
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª {city_channel}: {e}")
            else:
                query.answer(text="–ö–∞–Ω–∞–ª –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            city_file = city_files.get(city_to_check)
            if city_file:
                user_ids = dbs.get_users_by_city(city_to_check)
                for user_id in user_ids:
                    try:
                        context.bot.send_message(chat_id=user_id, text=format_message(address, details, photo, date_time))
                    except telegram.error.BadRequest as e:
                        print(f"Failed to send message to user {user_id}: {e}")

            else:
                print(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    context.user_data.clear()
    return ConversationHandler.END
def compose_final_message(address, details, photo_url):
    return f"–ê–¥—Ä–µ—Å: {address}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {details}\n–§–æ—Ç–æ: {photo_url}"


def publish_message_city(update: Update, context: CallbackContext):
    try:
        user_id = update.message.chat_id
    except Exception as e:
        query = update.callback_query
        query.answer()
        user_id = query.message.chat_id
    city_file = context.user_data['city_file']
    city_name = context.user_data['city_name']

    address = user_data[user_id].get('EXACT_ADDRESS', '').strip()
    details = user_data[user_id].get('DETAILS', '').strip()
    photo = user_data[user_id].get('PHOTO', '').strip()
    print(f"PHOTO IS : {photo}")
    date_time = user_data[user_id].get('DATE_TIME', '').strip()
    text = format_message(address, details, photo, date_time)
    try:
        user_ids = dbs.get_users_by_city(city_name)
        print(user_ids)
        print(city_name)
        for user_id in user_ids:
            print(user_id)
            for city_channel in channelsss:
                res1 = is_user_in_channel(bot, city_channel, user_id)
                if res1 == True:
                    break
            if res1 == True:
                continue
            try:
                context.bot.send_message(chat_id=user_id, text=text)
            except Exception as e:
                print(e)
        print('USER_ID SSWAPPED')
        for filek, channel_id in file_to_channel_id.items():
            print(filek)
            print(city_file)
            if filek == city_file:
                print('URAAAAAA')
                context.bot.send_message(chat_id=channel_id, text=text)
    except Exception as e:
        print(e)
def process_message_for_publication(update, context):
    try:
        user_id = update.message.chat_id
    except Exception as e:
        query = update.callback_query
        query.answer()
        user_id = query.message.chat_id
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_data
    address = user_data[user_id].get('EXACT_ADDRESS', '').strip()
    details = user_data[user_id].get('DETAILS', '').strip()
    photo_url = user_data[user_id].get('PHOTO', '').strip()
    formatted_date = user_data[user_id].get('DATE_TIME', '').strip()
    print(f"ADDRESS DETAILS {address} {details}")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ Chat GPT –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    prompt_address = f"–í—ñ–∑—å–º–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {address}, —Ç–∞ –ø—Ä–æ–≤–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–∞, –∞ —Å–∞–º–µ: –í–∏–¥–∞–ª–∏ –∑ —Ç–µ–∫—Å—Ç—É –≤—Å—ñ –æ–±—Ä–∞–∑–∏, –ª–∞–π–∫–∏ —Ç–∞ —Å–ª–µ–Ω–≥–∏. –ü—Ä–∏–±–µ—Ä–∏ –≤—Å—ñ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∏, —Ç–µ–≥–∏, –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"
    prompt_details = f"–í—ñ–∑—å–º–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {details}, —Ç–∞ –ø—Ä–æ–≤–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è, –∞ —Å–∞–º–µ: –í–∏–¥–∞–ª–∏ –∑ —Ç–µ–∫—Å—Ç—É –≤—Å—ñ –æ–±—Ä–∞–∑–∏, –ª–∞–π–∫–∏ —Ç–∞ —Å–ª–µ–Ω–≥–∏. –ü—Ä–∏–±–µ—Ä–∏ –≤—Å—ñ —Å–ø–µ—Ü.—Å–∏–º–≤–æ–ª–∏, —Ç–µ–≥–∏, –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–µ—Ä–µ–∫–ª–∞–¥–∏ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ Chat GPT (–ø—Å–µ–≤–¥–æ–∫–æ–¥, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
    moderated_address = send_to_chat_gpt(prompt_address)
    moderated_details = send_to_chat_gpt(prompt_details)
    print(f"ADDRESS {moderated_address}\n\n")

    print(f"DETAILS:{moderated_details}\n\n")
    user_data[user_id]['EXACT_ADDRESS'] = moderated_address
    user_data[user_id]['DETAILS'] = moderated_details
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    post_id = dbs.add_post(user_id, moderated_address, moderated_details, photo_url, formatted_date)
    if details:
        info_dbs.add_address(moderated_address, moderated_details)
    user_data[user_id]['POST_ID'] = post_id
    final_message = compose_final_message(moderated_address, moderated_details, photo_url)
    print(final_message)
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    publish_message_city(update, context)
    return ConversationHandler.END

def send_to_chat_gpt(prompt):
    openai.api_key = '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'
    try:
        print(prompt)
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ - –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –¥–æ–ø–æ–º–æ–≥–∞—î –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —ñ –ø–µ—Ä–µ—Ä–æ–±–ª—é–≤–∞—Ç–∏ –ø–æ—Å—Ç–∏."},
                {"role": "user", "content": prompt}
            ]
        )
    except Exception as e:
        print(e)
    return response['choices'][0]['message']['content']
    
def photo(update, context: CallbackContext) -> int:
    
    user_id = update.message.chat_id
    if user_id not in user_data:
        user_data[user_id] = {}
    # Check if the update message actually has a photo
    if 'EDIT_USER_ID' in context.user_data:
        updaterPhoto(update, context)
        return ConversationHandler.END
    if update.message.photo:
        photo_file = update.message.photo[-1].get_file()
        photo_path = f'imgs/user_{user_id}_photo.jpg'
        photo_file.download(photo_path)
        imgur_url = upload_image_to_imgur(photo_path, "a4d7dd18d36705f")
        
        # Process the photo and update user data
        if imgur_url:
            user_data[user_id]['PHOTO'] = imgur_url
            photo_status = imgur_url  # Successfully uploaded photo URL
        else:
            user_data[user_id]['PHOTO'] = "Failed to upload photo"
            photo_status = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ."
            update.message.reply_text(photo_status)
    else:
        # If there's no photo, set a placeholder or skip the photo part
        photo_status = ""
    # Common details for both cases
    now = datetime.now()
    month_name = ukrainian_months[now.month]  # Ensure ukrainian_months dict is defined
    formatted_date = now.strftime(f"%d {month_name}, %H:%M")
    user_data[user_id]['DATE_TIME'] = formatted_date

    # Prepare the message text with or without the photo URL
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
        address = user_data[user_id].get('EXACT_ADDRESS', '').strip()
        details = user_data[user_id].get('DETAILS', '').strip()
        city = user_data[user_id].get('city', '').strip()
        context.user_data['city_name'] = city
        if city in city_files:
            context.user_data['city_file'] = city_files[city]
        photo_status = user_data[user_id].get('PHOTO', '').strip()
        date_time = user_data[user_id].get('DATE_TIME', '').strip()
        user_id_str = str(user_id).strip()
        update.message.reply_text("<b>–î—è–∫—É—î–º–æ, —â–æ –∑–∞–ª–∏—à–∏–ª–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É. –í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–¥–µ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ, —ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞.</b>", parse_mode='HTML')
        process_message_for_publication(update, context)
        return ConversationHandler.END
    except Exception as e:
        print(f"PHOTO {e}")
def expire_promocodes(context: CallbackContext):
    conn = sqlite3.connect('subscribe.db')
    cursor = conn.cursor()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π" –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("UPDATE promocodes SET active = 0 WHERE expiry_date < ?", (current_time,))
    conn.commit()
    conn.close()

def broadcast_message(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('https://www.google.com/maps/')
    return ConversationHandler.END
def skip_photo(update: Update, context: CallbackContext) -> int:

    print(123)
    print(context.user_data)
    if 'EDIT_USER_ID' in context.user_data:
        print('SKIP PHOTO DPLASJDAIOHAS9YW98FWYRQ98WFHESU89FHSA9FHD')
        context.user_data.clear()
    update.message.reply_text("<b>–î—è–∫—É—î–º–æ, —â–æ –∑–∞–ª–∏—à–∏–ª–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É. –í–∞—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±—É–¥–µ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ, —ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞.</b>", parse_mode='HTML')
    process_message_for_publication(update, context)
    return CallbackQueryHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove())

async def main() -> None:
    global bot
    updater = Updater("6868089807:AAHZQOe_6ex-eKgRwzmQ2rCXLnnbcvSnbDE")
    dispatcher = updater.dispatcher
    bot = updater.bot

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex('^–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É$'), new_address),
            CallbackQueryHandler(button, pattern='^yr_')  # –î–æ–±–∞–≤–ª–µ–Ω YR –∫–∞–∫ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
        ],
        states={
            EXACT_ADDRESS: [MessageHandler(Filters.text & ~Filters.command, exact_address)],
            DETAILS: [MessageHandler(Filters.text & ~Filters.command, details), CallbackQueryHandler(button, pattern='^skip_details$')],
            PHOTO: [MessageHandler(Filters.all, photo), CallbackQueryHandler(button, pattern='^skip_photo$')]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    conv_handler_broadcast = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^–†–∞—Å—Å—ã–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º$'), broadcast_moderator)],
        states={
            CHOOSE_city: [CallbackQueryHandler(choose_city)],
            BROADCAST_MSG: [MessageHandler(Filters.all & ~Filters.command, broadcast_to_city)],
            BROADCAST_ALL: [MessageHandler(Filters.all & ~Filters.command, broadcast_to_all_cities)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    conv_handler_message = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^–í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–∞—Ä—Ç—É –∞–¥—Ä–µ—Å'), broadcast_message)],
        states={
            CHOOSE_city: [CallbackQueryHandler(choose_city)],
            BROADCAST_MSG: [MessageHandler(Filters.all & ~Filters.command, broadcast_to_city)],
            BROADCAST_ALL: [MessageHandler(Filters.all & ~Filters.command, broadcast_to_all_cities)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    conv_handler_bon_code = ConversationHandler(
        entry_points=[MessageHandler(Filters.regex('^–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥$'), ask_for_bonus_code)],
        states={
            BONUS_CODE: [MessageHandler(Filters.text & ~Filters.command, check_bonus_code)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]

    )


    dispatcher.add_handler(conv_handler_broadcast)
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("city", city))
    dispatcher.add_handler(MessageHandler(Filters.regex('^–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å-–∫–æ–¥$'), share_bonus_code))
    dispatcher.add_handler(conv_handler_message)
    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(conv_handler_bon_code)
    dispatcher.add_handler(CallbackQueryHandler(button))  # –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ü–µ
    daily_message_job = DailyMessageJob('bot.db', info_dbs)
    daily_message_job.schedule(updater)
    watcher = TelegramChannelWatcher(dbm, dbs, bot)
    dbm.add_channel("odessapublic01", "–û–¥–µ—Å–∞", "-1002018743530")
    dbm.add_channel("dsadaad123", "–û–¥–µ—Å–∞", "-1002018743530")
    print(dbm.print_all_channels())
    watcher.start()

    updater.start_polling()
    job_queue = updater.job_queue
    job_queue.run_repeating(expire_promocodes, interval=3600, first=0)  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å

    updater.idle()
    
if __name__ == '__main__':
    asyncio.run(main())
